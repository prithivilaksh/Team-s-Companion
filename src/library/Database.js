//import { getRecords, getQueryForAllStudents, getQueryForAllStaffs, getQueryForAllSubjects } from './FirebaseApp';

import { createKey, createRoomKey, getDynamicDropdownData, userProfile } from "./FirebaseApp";

let cacheColorForTags = {};
const weekList = [
  "Sunday",
  "Monday",
  "Tuesday",
  "Wednesday",
  "Thursday",
  "Friday",
  "Saturday"
];

const colorPallets = [
  // "#2596BE",
  // "#51ABCB",
  "#7B241C",
  "#633974",
  "#1A5276",
  "#117864",
  "#196F3D",
  "#9A7D0A",
  "#935116",
  "#212F3C"
];

const forms = [
  {
    id: "createRoom",
    name: "Create Room",
    table: "Room",
    action: "Create Room",
    properties: [
      {
        property: "id",
        propertyType: "text",
        mandatory: true,
        validate: "\\w{5}",
        autogenerated: true,
        view: "hidden",
        defValue: "",
        placeholder: "Identifier",
        error: "ID missing"
      },
      {
        property: "name",
        propertyType: "text",
        mandatory: true,
        validate: "^(?!\\s*$).+",
        autogenerated: false,
        view: "TextField",
        defValue: "",
        placeholder: "Name of the Room",
        error: "Room name is missing."
      }
    ]
  },
  {
    id: "joinRoom",
    name: "Join Room",
    table: "User",
    action: "Join Room",
    properties: [
      {
        property: "id",
        propertyType: "text",
        mandatory: true,
        validate: "\\w{5}",
        autogenerated: false,
        view: "TextField",
        defValue: "",
        placeholder: "Room ID",
        error: "Room ID is missing."
      }
    ]
  },
  {
    id: "createEvent",
    name: "Create Event",
    table: "Event",
    action: "Create Event",
    properties:
      [
        {
          property: "id",
          propertyType: "text",
          mandatory: true,
          validate: "/^.{21}$/",
          autogenerated: true,
          view: "Hidden",
          defValue: "",
          placeholder: "Idenitifier",
          error: "ID missing"
        },
        {
          property: "roomInfo",
          propertyType: "object",
          mandatory: true,
          validate: "",
          autogenerated: true,
          view: "Hidden",
          defValue: "",
          placeholder: "Room Information",
          error: "Room Info missing"
        },
        {
          property: "start",
          propertyType: "text",
          mandatory: true,
          validate: "",
          autogenerated: false,
          view: "TextField",
          defValue: "",
          placeholder: "Start Time (Eg : 13:00)",
          error: "Start time missing"
        },
        {
          property: "end",
          propertyType: "text",
          mandatory: true,
          validate: "",
          autogenerated: false,
          view: "TextField",
          defValue: "",
          placeholder: "End Time (Eg : 14:00)",
          error: "End time missing"
        },
        {
          property: "staffTag",
          propertyType: "object",
          mandatory: true,
          validate: "",
          autogenerated: false,
          view: "DropDown",
          defValue: "",
          placeholder: "Select Tag",
          error: "Tag not selected",
          linkType: "Dynamic",
          link: "StaffTag",
          props: ["id", "name", "tagInfo", "staffInfo"]
        },
        {
          property: "date",
          propertyType: "text",
          mandatory: true,
          validate: "",
          autogenerated: false,
          view: "DatePicker",
          defValue: "",
          placeholder: "Date",
          error: "Date not selected"
        },
        {
          property: "day",
          propertyType: "text",
          mandatory: true,
          validate: "",
          autogenerated: false,
          view: "DropDown",
          defValue: { id: "Sunday", name: "Sunday" },
          placeholder: "Day of the week",
          error: "Day not selected",
          linkType: "Static",
          link: "Days",
          props: [
            "Sunday",
            "Monday",
            "Tuesday",
            "Wednesday",
            "Thursday",
            "Friday",
            "Saturday"
          ]
        },
        {
          property: "recurring",
          propertyType: "text",
          mandatory: true,
          validate: "",
          autogenerated: false,
          view: "DropDown",
          defValue: { id: "Once", name: "Once" },
          placeholder: "Type",
          error: "Type not choosen",
          linkType: "Static",
          link: "Occurrence",
          props: [
            "Once",
            "Weekly"
          ]
        }
      ]

  },
  {
    id: "createAssignment",
    name: "Create Assignment",
    table: "Assignment",
    action: "Create Assignment",
    properties: [
      {
        property: "id",
        propertyType: "text",
        mandatory: true,
        validate: "/^.{21}$/",
        autogenerated: true,
        view: "Hidden",
        defValue: "",
        placeholder: "Idenitifier",
        error: "ID missing"
      },
      {
        property: "roomInfo",
        propertyType: "object",
        mandatory: true,
        validate: "",
        autogenerated: true,
        view: "Hidden",
        defValue: "",
        placeholder: "Room Information",
        error: "Room Info missing"
      },
      {
        property: "topic",
        propertyType: "text",
        mandatory: true,
        validate: "",
        autogenerated: false,
        view: "TextField",
        defValue: "",
        placeholder: "Topic of Assignment",
        error: "Topic missing"
      },
      {
        property: "staffTag",
        propertyType: "object",
        mandatory: true,
        validate: "",
        autogenerated: false,
        view: "DropDown",
        defValue: "",
        placeholder: "Select Tag",
        error: "Tag not selected",
        linkType: "Dynamic",
        link: "StaffTag",
        props: ["id", "name", "tagInfo", "staffInfo"]
      },
      {
        property: "date",
        propertyType: "text",
        mandatory: true,
        validate: "",
        autogenerated: true,
        view: "Hidden",
        defValue: "",
        placeholder: "",
        error: "Date error"
      },
      {
        property: "dueDate",
        propertyType: "text",
        mandatory: true,
        validate: "",
        autogenerated: false,
        view: "DatePicker",
        defValue: "",
        placeholder: "Due Date",
        error: "Select Due Date"
      }
    ]
  },
  {
    id: "createQuestion",
    name: "Ask Question",
    table: "Forum",
    action: "Post Question",
    properties: [
      {
        property: "id",
        propertyType: "text",
        mandatory: true,
        validate: "/^.{21}$/",
        autogenerated: true,
        view: "Hidden",
        defValue: "",
        placeholder: "Idenitifier",
        error: "ID missing"
      },
      {
        property: "date",
        propertyType: "text",
        mandatory: true,
        validate: "",
        autogenerated: true,
        view: "Hidden",
        defValue: "",
        placeholder: "Date",
        error: "Date missing"
      },
      {
        property: "title",
        propertyType: "text",
        mandatory: true,
        validate: "/^.{8,100}$/",
        autogenerated: false,
        view: "TextField",
        defValue: "",
        placeholder: "Enter the question briefly",
        error: "The title should be between 5 to 100 charcaters"
      },
      {
        property: "content",
        propertyType: "text",
        mandatory: false,
        validate: "",
        autogenerated: false,
        view: "QuillEditor",
        defValue: "",
        placeholder: "Elaborate the question",
        error: "Content error"
      },
      {
        property: "userInfo",
        propertyType: "object",
        mandatory: true,
        validate: "",
        autogenerated: true,
        view: "Hidden",
        defValue: {},
        placeholder: "User Info",
        error: "User Info Object is missing"
      },
      {
        property: "tagInfo",
        propertyType: "object",
        mandatory: true,
        validate: "",
        autogenerated: true,
        view: "DropDown",
        defValue: {},
        placeholder: "Select Tag",
        error: "Subject is not selected",
        linkType: "Dynamic",
        link: "Tag",
        props: ["id", "name"]
      },
      {
        property: "roomInfo",
        propertyType: "object",
        mandatory: true,
        validate: "",
        autogenerated: true,
        view: "Hidden",
        defValue: {},
        placeholder: "Room Info",
        error: "Room is missing"
      },
      {
        property: "qId",
        propertyType: "text",
        mandatory: true,
        validate: "",
        autogenerated: true,
        view: "Hidden",
        defValue: "-1",
        placeholder: "The value is always  -1",
        error: "Error with question id"
      }
    ]
  },
  {
    id: "createAnswer",
    name: "Post Answer",
    table: "Forum",
    action: "Submit Answer",
    properties: [
      {
        property: "id",
        propertyType: "text",
        mandatory: true,
        validate: "/^.{21}$/",
        autogenerated: true,
        view: "Hidden",
        defValue: "",
        placeholder: "Idenitifier",
        error: "ID missing"
      },
      {
        property: "date",
        propertyType: "text",
        mandatory: true,
        validate: "",
        autogenerated: true,
        view: "Hidden",
        defValue: "",
        placeholder: "Date",
        error: "Date missing"
      },
      {
        property: "content",
        propertyType: "text",
        mandatory: false,
        validate: "",
        autogenerated: false,
        view: "QuillEditor",
        defValue: "",
        placeholder: "Type your answer",
        error: "Error with storing the answer"
      },
      {
        property: "userInfo",
        propertyType: "object",
        mandatory: true,
        validate: "",
        autogenerated: true,
        view: "Hidden",
        defValue: {},
        placeholder: "User Info",
        error: "User Info Object is missing"
      },
      {
        property: "qId",
        propertyType: "text",
        mandatory: true,
        validate: "/^.{21}$/",
        autogenerated: true,
        view: "Hdden",
        defValue: "",
        placeholder: "The value is always  -1",
        error: "Error with question id"
      }
    ]
  },
  {
    id: "createStaff",
    name: "Create Staff",
    table: "Staff",
    action: "Create Staff",
    properties: [
      {
        property: "email",
        propertyType: "text",
        mandatory: true,
        validate: "",
        autogenerated: false,
        view: "TextField",
        defValue: "",
        placeholder: "Enter the email",
        error: "Invalid email"
      },
      {
        property: "name",
        propertyType: "text",
        mandatory: true,
        validate: "\w{4,20}",
        autogenerated: false,
        view: "TextField",
        defValue: "",
        placeholder: "Enter the staff name",
        error: "Name is missing"
      },
      {
        property: "roomInfo",
        propertyType: "object",
        mandatory: true,
        validate: "",
        autogenerated: true,
        view: "Hidden",
        defValue: {},
        placeholder: "Room Info",
        error: "Room is missing"
      }
    ]
  },
  {
    id: "createTag",
    name: "Create Subject",
    table: "Tag",
    action: "Create Subject",
    properties: [
      {
        property: "id",
        propertyType: "text",
        mandatory: true,
        validate: "/^.{21}$/",
        autogenerated: true,
        view: "Hidden",
        defValue: "",
        placeholder: "Idenitifier",
        error: "ID missing"
      },
      {
        property: "name",
        propertyType: "text",
        mandatory: true,
        validate: "\\w{2-20}",
        autogenerated: false,
        view: "TextField",
        defValue: "",
        placeholder: "Enter the subject",
        error: "Subject is not mentioned"
      },
      {
        property: "roomInfo",
        propertyType: "object",
        mandatory: true,
        validate: "",
        autogenerated: true,
        view: "Hidden",
        defValue: {},
        placeholder: "Room Info",
        error: "Room is missing"
      }
    ]
  },
  {
    id: "createStaffTag",
    name: "Create Tag",
    table: "StaffTag",
    action: "Create Tag",
    properties: [
      {
        property: "tagInfo",
        propertyType: "object",
        mandatory: true,
        validate: "\\w{2-20}",
        autogenerated: false,
        view: "DropDown",
        defValue: "",
        placeholder: "Select the Subject",
        error: "Subject is missing",
        linkType: "Dynamic",
        link: "Tag",
        props: ["id", "name"]
      },
      {
        property: "staffInfo",
        propertyType: "text",
        mandatory: true,
        validate: "\\w{2-20}",
        autogenerated: false,
        view: "ListView",
        defValue: [],
        placeholder: "Select Staffs",
        error: "Subject is missing",
        linkType: "Dynamic",
        link: "StaffRoom",
        props: ["staffInfo"]
      },
      {
        property: "roomInfo",
        propertyType: "object",
        mandatory: true,
        validate: "",
        autogenerated: true,
        view: "Hidden",
        defValue: {},
        placeholder: "Room Info",
        error: "Room is missing"
      }
    ]
  },
  {
    id: "userTag",
    name: "Add Tag",
    table: "User",
    action: "Add Tag",
    properties: [
      {
        property: "staffTagList",
        propertyType: "object",
        mandatory: "",
        validate: "",
        autogenerated: false,
        view: "DropDown",
        defValue: "",
        placeholder: "Select Subject",
        error: "Subject missing",
        linkType: "Dynamic",
        link: "StaffTag",
        props: ["id", "name", "tagInfo", "staffInfo"]
      }
    ]
  }

];

const getFormById = (id) => {
  for (let form of forms) {
    if (form.id === id) {
      return form;
    }
  }
  return null
};

const getDropdownData = (property, callback) => {
  if (property.linkType === 'Static') {
    let list = [];
    for (let prop of property.props) {
      list.push(
        {
          id: prop,
          name: prop
        }
      );
    }
    callback(list);
  } else {
    getDynamicDropdownData(property.link, (items, error) => {
      if (error) return;
      let list = [];
      for (let item of items) {
        let obj = {};
        for (let prop of property.props) {
          if (property.link === "StaffRoom") {
            obj = item[prop];
          } else {
            obj[prop] = item[prop];
          }
        }
        list.push(obj);
      }
      callback(list);
    });
  }
};

const getAdminTabs = (callback) => {
  if (callback) {
    let tabs = [
      {
        name: "Staff",
        link: "/admin/staff"
      },
      {
        name: "Subject",
        link: "/admin/subject"
      },
      {
        name: "Tag",
        link: "/admin/tag"
      }
    ];
    callback(tabs);
  }
};

const getTabs = (callback) => {
  if (callback) {
    let tabs = [
      {
        name: "Calendar",
        link: "/calendar"
      },
      {
        name: "Forum",
        link: "/forum"
      }
    ];
    callback(tabs);
  }
};

const getColor = (index, max = colorPallets.length, callback) => {
  let color = colorPallets[index % max];
  if (callback) {
    callback(color);
  }
};

const getColorTag = (id, callback, max = colorPallets.length) => {
  let color = cacheColorForTags[id];
  if (color) {
    console.log("Old Color : ", color);
    if (callback) {
      callback(color);
    }
  } else {
    console.log("New Color");
    getColor(Object.keys(cacheColorForTags).length, max, (color) => {
      cacheColorForTags[id] = color;
      if (callback) {
        callback(color);
      }
    });
  }
};

const getNewObject = (form, callback) => {
  if (form) {
    let object = {};
    for (let property of form.properties) {
      if (property.autogenerated) {
        switch (property.property) {
          case "id":
            object.id = (form.id === "createRoom") ? createRoomKey() : createKey();
            break;
          case "userInfo":
            object.userInfo = {
              id: userProfile.id,
              name: userProfile.email
            };
            break;
          case "roomInfo":
            object.roomInfo = userProfile.roomInfo;
            break;
          case "date":
            object.date = getCurrentDate();
            break;
          default:
            //do nothing.
            break;
        }
      } else {
        object[property.property] = property.defValue;
      }
    }
    if (callback) {
      callback(object);
    }
  }
};

const removeRefreshPath = () => {
  window.localStorage.removeItem("refreshPath");
}

const setRefreshPath = (path) => {
  if (!(path === "" || path === "/" || path === "/room")) {
    window.localStorage.setItem("refreshPath", path);
  }
}

const getRefreshPath = () => {
  return window.localStorage.getItem("refreshPath") || "/calendar";
}


const getCurrentDate = () => {
  let today = new Date();
  let mon = today.getMonth() + 1 + "";
  let day = today.getDate();
  mon = ((mon.length === 1) ? "0" : "") + mon;
  day = ((day < 10) ? "0" : "") + day;
  let dateString = today.getFullYear() + "-" + mon + "-" + day;
  return dateString;
}



const dayOfWeek = (d, m, y) =>{ 
    var t = [ 0, 3, 2, 5, 0, 3,5, 1, 4, 6, 2, 4 ]; 
    y -= m < 3; 
    return Math.floor( ( y + Math.floor(y / 4) - Math.floor(y / 100) + Math.floor(y / 400) + t[m - 1] + d) % 7 ); 
} 

const currentDay = (date) => {
  date = date.split("-");
  console.log(dayOfWeek(date[2],date[1],date[0])+2)
  return weekList[(dayOfWeek(date[2],date[1],date[0])+2)%7];
}



export {
  getColor, getFormById, getDropdownData, getColorTag,
  getNewObject, getTabs, getCurrentDate, getAdminTabs,
  getRefreshPath, removeRefreshPath, setRefreshPath,
  currentDay
};